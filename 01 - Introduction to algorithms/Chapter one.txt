									Introduction to algorithms
An algorithm is a set of instructions for accomplishing a task

Trade-offs between different algorithms are very important as it helps you to decide for example
	- Should you use merge sort or quicksort? 
	- Should you use an array or a list?

1- Binary Search:

search problem -> searching for a word in a dictionary, and it starts with O

input - > a sorted list of elements

output - > If 
		an element you’re looking for is in that list, binary search returns the position where it’s located
	   else
		binary search returns null.

Worst Case - > for any list of n, binary search will take log2 n steps to run in the worst case

log10 100 is like asking, “How many 10s do we multiply together to get 100?

Note: Binary search only works when your list is in sorted order So, What would happen if the list weren’t sorted?

Code: binarySearch.py



EXERCISES:

1.1 maximum number of steps it would take = log2 128 = 7
1.2 after doubling size of list max number of steps = log2 256 = 8

So, the logarithmic nature of binary search means that each doubling of the list size adds only one more step to the maximum number of steps needed.


Running time:

linear time -> If this a list of 100 numbers, it takes up to 100 guesses

logarithmic time -> If the list is 100 items long, it takes at most 7 guesses


Big O notation (worst-case scenario) : is special notation that tells you how fast an algorithm is by telling you the number of operations an algorithm will make

Note: it is not enough to know how long an algorithm takes to run, you need to know how the running time increases as the list size increases.That’s where Big O 
notation comes in.

Note: In reality you can’t convert from a Big O run time to a number of operations this neatly, but this is good enough for now

So, it is important to focus on the growth of the number of operations as size increased

EXERCISES:
1.3 O(log n )
1.4 O(n)
1.5 O(n)
1.6 Later


The traveling salesperson problem:
-You have a salesperson
-The salesperson has to go to five cities
-This salesperson,wants to hit all five cities while traveling the minimum distance. Here’s one way to do that: look 
 at every possible order in which he could travel to the cities
-He adds up the total distance and then picks the path with the lowest distance. There are 120 permutations with 5 cities, so it will 
 take 120 operations to solve the problem for 5 cities. For 6 cities, it will take 720 operations (there are 720 permutations). For 7 cities,  
 it will take 5,040 operations!
-In general, for n items, it will take n! (n factorial) operations to compute the result. So this is O(n!) time, or factorial time
-with 100+ cities, it’s impossible to calculate the answer in time—the Sun will collapse first.
-There’s no fast known algorithm for it, and smart people think it’s impossible to have a smart algorithm for this problem


 

		