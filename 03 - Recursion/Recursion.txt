
										Recursion


Pseudocode ->  is a high-level description of the problem you’re trying to solve, in code. It’s written like code, but it’s meant to be closer to human speech


Recursion: 

- Happen where a function calls itself. 

- When you write a recursive function, you have to tell it when to stop recursing to prevent infinite loop.

- That’s why every recursive function has two parts: the base case, and the recursive case

- So, recursive function has two parts:
		1-  recursive case : when the function calls itself
		2-  base case : when the function doesn’t call itself again
- example:
	def countdown(i):
	  print i
	  if i <= 0: 	(Base case)
	     return
 	  else:         (Recursive case)
             countdown(i-1)

The stack:

- has only two actions
	1- push (insert) ( add new item tothe top ) 
	2- pop  ( remove top most item and read it )

- The call stack :
	
- used internally in computer

- example:

	1- greet("nour"): computer allocate box in memory for the function call and set variable name set to nour in that box
	2- print Hello nour
	3- greet2 call with name = nour : box is allocated in memory for this function call and computer use stack for this calls so this box is added	
					  to the top of the first box
	4- print how are you nour  ( when i call greet 2 this means that the greet function is partially completed)
	5- return back to greet function box 
	6- print get ready to say good bye
	7- call bye()
	8- print bye nour
	9- greet function is done

Note: when you call a function from another function, the calling function is paused in a partially completed state


EXERCISE:

3.1->  - I have two functions greet and greet2
       - greet is called first and the name parameter on it set to maggie
       - inside greet another function greet2 is called 
       - so greet is supsended until greet2 is performed

The call stack with recursion:
- factorial example 

Cost of using Stack:
- saving all that info can take up a lot of memory
- when your stack is too tall, that means your computer is saving information for many function calls
- Solution to this:
	1- use loop instead
	2- use  tail recursion

EXERCISE:
3.2 -> the stack will grow until the program run out of space and show an error ( stack overflow error)
